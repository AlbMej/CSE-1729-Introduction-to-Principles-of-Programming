"Problem 1"
(define (num-occurs sym lst)
  (cond ((null? lst) 0)
        ((eq? sym (car lst)) (+ 1 (num-occurs sym (cdr lst))))
        (else (num-occurs sym (cdr lst)))))

(num-occurs 'uh-huh '( thats the way uh-huh uh-huh i like it uh-huh uh-huh ))

(num-occurs 'a '(a b c ( not (c b a ))))

"Problem 2"
(define (remove-all x l)
    (cond ((null? l) l)
          ((equal? (car l) x) (remove-all x (cdr l)))
          (else (cons (car l) (remove-all x (cdr l))))))

(define (freq-list symlst)
  (define (getsym result symlst) 
  (cond ((null? symlst) result)
        ((= (car symlst) (car result)) (
        (else (getsym (cons (cons (car symlst) (num-occurs (car symlst) symlst)) result) (cdr symlst)))))
  (getsym '() symlst))
      

(freq-list
 '(thats thats way like thats mother))


;(freq-list
 ;'(thats the way uh-huh uh-huh i like it uh-huh uh-huh
  ;        thats the way uh-huh uh-huh i like it uh-huh uh-huh
   ;       thats the way uh-huh uh-huh i like it uh-huh uh-huh
    ;      thats the way uh-huh uh-huh i like it uh-huh uh-huh ))

;; Output should be --> (( it . 4)( like . 4)( i . 4)( uh-huh . 16)( way . 4)( the . 4)( thats . 4))